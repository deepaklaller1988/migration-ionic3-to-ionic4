{"version":3,"sources":["./src/app/components/chat/chat.page.html","./src/app/components/chat/chat.module.ts","./src/app/components/chat/chat.page.scss","./src/app/components/chat/chat.page.ts","./src/app/services/chat.service.ts"],"names":[],"mappings":"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","file":"components-chat-chat-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar>\\n      <ion-title>{{username}}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content class=\\\"chat-content\\\">\\n  <div *ngIf=\\\"chat | async as chat\\\">\\n      <ion-item *ngIf=\\\"chat?.length==0\\\">\\n          <p>Conversation not yet started.!</p>\\n      </ion-item>\\n  </div>\\n  <div *ngFor=\\\"let msg of chat | async\\\">\\n      <ion-row *ngIf=\\\"(msg.uid == senderId); else other_content\\\">\\n          <ion-col class=\\\"chat-box\\\" col-10>\\n              <div class=\\\"chat-header\\\">\\n                  <span class=\\\"time\\\">{{ msg.createdAt| amTimeAgo }}</span>\\n              </div>\\n              <p class=\\\"msg\\\" class=\\\"ion-text-wrap\\\">{{msg.text}}</p>\\n          </ion-col>\\n      </ion-row>\\n      <ng-template #other_content>\\n          <ion-row>\\n              <ion-col class=\\\"chat-box-right\\\" col-10 offset-2>\\n                  <div class=\\\"chat-header\\\">\\n                      <span class=\\\"time\\\">{{msg.createdAt | amTimeAgo }}</span>\\n                  </div>\\n                  <p class=\\\"msg rt\\\" class=\\\"ion-text-wrap\\\">{{msg.text}}</p>\\n              </ion-col>\\n          </ion-row>\\n      </ng-template>\\n  </div>\\n  <p class=\\\"devider-time\\\"></p>\\n  <br>\\n  <br>\\n  <br>\\n  <ion-footer>\\n      <ion-row class=\\\"chat-footer\\\">\\n          <ion-col col-10 class=\\\"ion-no-padding\\\">\\n              <ion-item>\\n                  <ion-input type=\\\"text\\\" placeholder=\\\" Type message...\\\" name=\\\"message\\\" id=\\\"message\\\" [(ngModel)]=\\\"message\\\"></ion-input>\\n              </ion-item>\\n          </ion-col>\\n          <ion-col col-2 class=\\\"ion-no-padding\\\">\\n              <button ion-button icon only type=\\\"button\\\" [disabled]=\\\"!message\\\" class=\\\"send-btn\\\" (click)=\\\"onClickSend()\\\">\\n                  <ion-icon class=\\\"enter-btn\\\" name=\\\"send\\\"></ion-icon>\\n              </button>\\n          </ion-col>\\n      </ion-row>\\n  </ion-footer>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MomentModule } from 'ngx-moment';\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChatPage } from './chat.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MomentModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ChatPage]\n})\nexport class ChatPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2hhdC9jaGF0LnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit,OnDestroy } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\nimport { ChatService } from '../../services/chat.service';\nimport { Router,ActivatedRoute } from '@angular/router';\n//import { Content } from 'ionic-angular/index';\nimport { Observable } from 'rxjs';\nimport {map,takeWhile} from 'rxjs/operators';\n//import 'rxjs/add/operator/takeWhile';\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.page.html',\n  styleUrls: ['./chat.page.scss'],\n})\nexport class ChatPage implements OnDestroy {\n  //for this page, sender => loggedin user & receiver => other user\n  //@ViewChild(Content) content: Content;\n  private receiverId: string;\n  private senderId: string;\n  public username: string;\n  public message: string;\n  private chatId: string;\n  public chat;\n  private alive: boolean = true;\n\n\n    constructor(\n    private chatService: ChatService,\n    // private navParams: NavParams, //this is ionic 4\n    private loadingCtrl: LoadingController,\n    private router: Router,\n    private route: ActivatedRoute\n    ) {\n      this.constructorfn();\n    }\n\n  async constructorfn(){\n    const loader = await this.loadingCtrl.create({\n      message: 'Getting info...'\n    });\n    loader.present().then(() => {\n       this.receiverId = this.route.snapshot.paramMap.get('uid');\n       this.senderId = localStorage.getItem('uid');\n       this.chatId = this.route.snapshot.paramMap.get('chatId');\n       this.username = this.route.snapshot.paramMap.get('username');\n        if (this.chatId) {\n            this.getChat();\n        } else {\n            this.chatService.checkChatAvailability(this.senderId, this.receiverId).valueChanges().subscribe((res: any) => {\n                if (res.length > 0) {\n                    this.chatId = res[0].chatId;\n                    this.getChat();\n                } else {\n                    const chatId = Date.now();\n                    this.chatId = chatId.toString();\n                    this.chatService.chatInitializer(this.senderId, this.receiverId, this.chatId).then(() => {\n                        this.getChat();\n                    });\n                }\n            });\n        }\n    }).then(() => {\n        loader.dismiss();\n    });\n  }\n\n  getChat() {\n      this.chat = this.chatService.getChat(this.chatId).snapshotChanges().pipe(map( items => {\n          return items.map((item: any) => {\n              const msgId = item.payload.doc.id;\n              let data = item.payload.doc.data()\n              if (data.uid != this.senderId && data.unread) {\n                  this.chatService.markAsRead(this.chatId, msgId).then();\n              }\n              this.scrollToBottom();\n              return { msgId, ...data };\n          });\n      })).pipe(takeWhile(() => this.alive));\n  }\n\n  ngOnDestroy() {\n      this.alive = false;\n  }\n\n  onClickSend() {\n      this.chatService.sendMessage(this.chatId, this.senderId, this.message).then(() => {\n          this.message = '';\n          this.scrollToBottom();\n      });\n\n  }\n\n  scrollToBottom() {\n      setTimeout(() => {\n        console.log('no chat');\n         // this.content.scrollToBottom();\n      }, 500);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection } from 'angularfire2/firestore';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  private chats: AngularFirestoreCollection<{}>;\n\n  constructor(private afService: AngularFirestore) {\n    this.chats = this.afService.collection('chats');\n  }\n\n  chatInitializer(senderId, receiverId, chatId) {\n    //do not add any new property to body object otherwise code will break\n    let body = {};\n    body['createdAt'] = Number(chatId);\n    body['chatId'] = chatId;\n    body[senderId] = senderId;\n    body[receiverId] = receiverId;\n    return this.chats.doc(chatId).set(body);\n  }\n\n  checkChatAvailability(senderId, receiverId) {\n    return this.afService.collection('chats', ref => ref.where(senderId, '==', senderId).where(receiverId, '==', receiverId));\n  }\n\n  getChat(chatId) {\n    return this.chats.doc(chatId).collection('messages', ref => ref.orderBy('createdAt', 'asc'));\n  }\n\n  sendMessage(chatId, senderId, message) {\n    return this.chats.doc(chatId).collection('messages').add({\n      createdAt: Date.now(),\n      uid: senderId,\n      unread: true,\n      text: message\n    });\n  }\n\n  markAsRead(chatId, msgId) {\n    return this.chats.doc(chatId).collection('messages').doc(msgId).update({ unread: false });\n  }\n}\n"],"sourceRoot":""}