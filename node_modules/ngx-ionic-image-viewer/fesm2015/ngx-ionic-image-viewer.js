import { Injectable, ɵɵdefineInjectable, Component, Input, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';
import { __awaiter } from 'tslib';
import { ModalController, IonicModule } from '@ionic/angular';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxIonicImageViewerService {
    constructor() { }
}
NgxIonicImageViewerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxIonicImageViewerService.ctorParameters = () => [];
/** @nocollapse */ NgxIonicImageViewerService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgxIonicImageViewerService_Factory() { return new NgxIonicImageViewerService(); }, token: NgxIonicImageViewerService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ViewerModalComponent {
    /**
     * @param {?} modalController
     */
    constructor(modalController) {
        this.modalController = modalController;
        this.defaultSlideOpts = {
            centeredSlides: 'true',
            zoom: {
                enabled: true
            }
        };
        this.options = Object.assign({}, this.defaultSlideOpts);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.slides.update();
    }
    /**
     * @return {?}
     */
    closeModal() {
        this.modalController.dismiss();
    }
}
ViewerModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'ion-viewer-modal',
                template: "<ion-header [ngClass]=\"{ 'no-title': title.length <= 0 }\">\n  <ion-toolbar>\n    <ion-buttons slot=\"primary\">\n      <ion-button (click)=\"closeModal()\"> <ion-icon slot=\"icon-only\" name=\"close\"></ion-icon> </ion-button>\n    </ion-buttons>\n    <ion-title>{{ title }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content [forceOverscroll]=\"false\" fullscreen=\"true\">\n  <ion-slides [options]=\"options\" #sliderRef>\n    <ion-slide>\n      <div class=\"swiper-zoom-container\">\n        <img alt=\"alt\" [src]=\"src\" height=\"100vh\" />\n      </div>\n    </ion-slide>\n  </ion-slides>\n</ion-content>\n\n<ion-footer [ngClass]=\"{ 'no-text': text.length <= 0 }\">\n  <ion-toolbar class=\"ion-text-center\">\n    <ion-text>{{ text }}</ion-text>\n  </ion-toolbar>\n</ion-footer>\n",
                styles: ["ion-slides{--height:100%;height:100%}ion-toolbar{--border-style:none;--background:rgba(var(--ion-background-color-rgb, (255, 255, 255)), 0.6);background:rgba(var(--ion-background-color-rgb,255,255,255),.6)}ion-header{position:absolute}ion-header.no-title:after{content:none}ion-header.no-title ion-toolbar{--background:rgba(0, 0, 0, 0);background:rgba(0,0,0,0)}ion-footer{position:absolute;bottom:0}ion-footer.no-text:before{content:none}ion-footer.no-text ion-toolbar{--background:rgba(0, 0, 0, 0);background:rgba(0,0,0,0)}"]
            }] }
];
/** @nocollapse */
ViewerModalComponent.ctorParameters = () => [
    { type: ModalController }
];
ViewerModalComponent.propDecorators = {
    src: [{ type: Input }],
    alt: [{ type: Input }],
    title: [{ type: Input }],
    text: [{ type: Input }],
    options: [{ type: Input }],
    slides: [{ type: ViewChild, args: ['sliderRef', { static: true },] }]
};
if (false) {
    /** @type {?} */
    ViewerModalComponent.prototype.src;
    /** @type {?} */
    ViewerModalComponent.prototype.alt;
    /** @type {?} */
    ViewerModalComponent.prototype.title;
    /** @type {?} */
    ViewerModalComponent.prototype.text;
    /** @type {?} */
    ViewerModalComponent.prototype.defaultSlideOpts;
    /** @type {?} */
    ViewerModalComponent.prototype.options;
    /** @type {?} */
    ViewerModalComponent.prototype.slides;
    /**
     * @type {?}
     * @private
     */
    ViewerModalComponent.prototype.modalController;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxIonicImageViewerComponent {
    /**
     * @param {?} modalController
     */
    constructor(modalController) {
        this.modalController = modalController;
    }
    /**
     * @param {?} src
     * @param {?=} title
     * @param {?=} text
     * @return {?}
     */
    viewImage(src, title = '', text = '') {
        return __awaiter(this, void 0, void 0, /** @this {!NgxIonicImageViewerComponent} */ function* () {
            /** @type {?} */
            const modal = yield this.modalController.create({
                component: ViewerModalComponent,
                componentProps: {
                    src,
                    title,
                    text
                },
                cssClass: 'modal-fullscreen',
                keyboardClose: true,
                showBackdrop: true
            });
            return yield modal.present();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
NgxIonicImageViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ion-img-viewer',
                template: "<ion-img [alt]=\"alt\" [src]=\"src\" (click)=\"viewImage(src, title, text)\"></ion-img>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [`
      .modal-fullscreen {
        --border-radius: 0;
        border-radius: 0;
      }
      .modal-fullscreen .modal-wrapper {
        position: absolute;
        top: 0;
        left: 0;
        display: block;
        width: 100%;
        height: 100%;
      }
    `]
            }] }
];
/** @nocollapse */
NgxIonicImageViewerComponent.ctorParameters = () => [
    { type: ModalController }
];
NgxIonicImageViewerComponent.propDecorators = {
    src: [{ type: Input }],
    alt: [{ type: Input }],
    title: [{ type: Input }],
    text: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.src;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.alt;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.title;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.text;
    /** @type {?} */
    NgxIonicImageViewerComponent.prototype.modalController;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxIonicImageViewerModule {
}
NgxIonicImageViewerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgxIonicImageViewerComponent, ViewerModalComponent],
                imports: [CommonModule, IonicModule],
                entryComponents: [ViewerModalComponent],
                exports: [NgxIonicImageViewerComponent, ViewerModalComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxIonicImageViewerComponent, NgxIonicImageViewerModule, NgxIonicImageViewerService, ViewerModalComponent as ɵa };
//# sourceMappingURL=ngx-ionic-image-viewer.js.map
