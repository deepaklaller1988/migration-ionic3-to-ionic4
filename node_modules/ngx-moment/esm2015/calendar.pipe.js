/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
import { Pipe, ChangeDetectorRef, EventEmitter, NgZone } from '@angular/core';
import * as moment from 'moment';
/** @type {?} */
const momentConstructor = moment;
export class CalendarPipe {
    /**
     * @param {?} cdRef
     * @param {?} ngZone
     */
    constructor(cdRef, ngZone) {
        this.cdRef = cdRef;
        this.ngZone = ngZone;
        // using a single static timer for all instances of this pipe for performance reasons
        CalendarPipe.initTimer(ngZone);
        CalendarPipe.refs++;
        // values such as Today will need to be replaced with Yesterday after midnight,
        // so make sure we subscribe to an EventEmitter that we set up to emit at midnight
        this.midnightSub = CalendarPipe.midnight.subscribe(() => {
            this.ngZone.run(() => this.cdRef.markForCheck());
        });
    }
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    transform(value, ...args) {
        /** @type {?} */
        let formats = null;
        /** @type {?} */
        let referenceTime = null;
        for (let i = 0, len = args.length; i < len; i++) {
            if (args[i] !== null) {
                if (typeof args[i] === 'object' && !moment.isMoment(args[i])) {
                    formats = args[i];
                }
                else {
                    referenceTime = momentConstructor(args[i]);
                }
            }
        }
        return momentConstructor(value).calendar(referenceTime, formats);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (CalendarPipe.refs > 0) {
            CalendarPipe.refs--;
        }
        if (CalendarPipe.refs === 0) {
            CalendarPipe.removeTimer();
        }
        this.midnightSub.unsubscribe();
    }
    /**
     * @param {?} ngZone
     * @return {?}
     */
    static initTimer(ngZone) {
        // initialize the timer
        if (!CalendarPipe.midnight) {
            CalendarPipe.midnight = new EventEmitter();
            if (typeof window !== 'undefined') {
                /** @type {?} */
                const timeToUpdate = CalendarPipe._getMillisecondsUntilUpdate();
                CalendarPipe.timer = ngZone.runOutsideAngular(() => {
                    return window.setTimeout(() => {
                        // emit the current date
                        CalendarPipe.midnight.emit(new Date());
                        // refresh the timer
                        CalendarPipe.removeTimer();
                        CalendarPipe.initTimer(ngZone);
                    }, timeToUpdate);
                });
            }
        }
    }
    /**
     * @return {?}
     */
    static removeTimer() {
        if (CalendarPipe.timer) {
            window.clearTimeout(CalendarPipe.timer);
            CalendarPipe.timer = null;
            CalendarPipe.midnight = null;
        }
    }
    /**
     * @return {?}
     */
    static _getMillisecondsUntilUpdate() {
        /** @type {?} */
        const now = momentConstructor();
        /** @type {?} */
        const tomorrow = momentConstructor().startOf('day').add(1, 'days');
        /** @type {?} */
        const timeToMidnight = tomorrow.valueOf() - now.valueOf();
        return timeToMidnight + 1000; // 1 second after midnight
    }
}
/**
 * Internal reference counter, so we can clean up when no instances are in use
 */
CalendarPipe.refs = 0;
CalendarPipe.timer = null;
CalendarPipe.midnight = null;
CalendarPipe.decorators = [
    { type: Pipe, args: [{ name: 'amCalendar', pure: false },] }
];
/** @nocollapse */
CalendarPipe.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone }
];
if (false) {
    /**
     * Internal reference counter, so we can clean up when no instances are in use
     * @type {?}
     */
    CalendarPipe.refs;
    /** @type {?} */
    CalendarPipe.timer;
    /** @type {?} */
    CalendarPipe.midnight;
    /** @type {?} */
    CalendarPipe.prototype.midnightSub;
    /** @type {?} */
    CalendarPipe.prototype.cdRef;
    /** @type {?} */
    CalendarPipe.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,