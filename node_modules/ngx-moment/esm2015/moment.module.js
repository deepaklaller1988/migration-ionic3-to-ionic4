/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NGX_MOMENT_OPTIONS } from './moment-options';
import { AddPipe } from './add.pipe';
import { CalendarPipe } from './calendar.pipe';
import { DateFormatPipe } from './date-format.pipe';
import { DifferencePipe } from './difference.pipe';
import { DurationPipe } from './duration.pipe';
import { FromUnixPipe } from './from-unix.pipe';
import { FromUtcPipe } from './from-utc.pipe';
import { IsAfterPipe } from './is-after.pipe';
import { IsBeforePipe } from './is-before.pipe';
import { LocalTimePipe } from './local.pipe';
import { LocalePipe } from './locale.pipe';
import { ParsePipe } from './parse.pipe';
import { ParseZonePipe } from './parse-zone.pipe';
import { SubtractPipe } from './subtract.pipe';
import { TimeAgoPipe } from './time-ago.pipe';
import { UtcPipe } from './utc.pipe';
/** @type {?} */
const ANGULAR_MOMENT_PIPES = [
    AddPipe,
    CalendarPipe,
    DateFormatPipe,
    DifferencePipe,
    DurationPipe,
    FromUnixPipe,
    ParsePipe,
    SubtractPipe,
    TimeAgoPipe,
    UtcPipe,
    FromUtcPipe,
    LocalTimePipe,
    LocalePipe,
    ParseZonePipe,
    IsBeforePipe,
    IsAfterPipe
];
export class MomentModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: MomentModule,
            providers: [
                {
                    provide: NGX_MOMENT_OPTIONS, useValue: Object.assign({}, options)
                }
            ]
        };
    }
}
MomentModule.decorators = [
    { type: NgModule, args: [{
                declarations: ANGULAR_MOMENT_PIPES,
                exports: ANGULAR_MOMENT_PIPES
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9tZW50Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tb21lbnQvIiwic291cmNlcyI6WyJtb21lbnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQW9CLE1BQU0sa0JBQWtCLENBQUM7QUFFeEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7O01BRS9CLG9CQUFvQixHQUFHO0lBQzNCLE9BQU87SUFDUCxZQUFZO0lBQ1osY0FBYztJQUNkLGNBQWM7SUFDZCxZQUFZO0lBQ1osWUFBWTtJQUNaLFNBQVM7SUFDVCxZQUFZO0lBQ1osV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO0lBQ1gsYUFBYTtJQUNiLFVBQVU7SUFDVixhQUFhO0lBQ2IsWUFBWTtJQUNaLFdBQVc7Q0FDWjtBQU1ELE1BQU0sT0FBTyxZQUFZOzs7OztJQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQTBCO1FBQ3ZDLE9BQU87WUFDTCxRQUFRLEVBQUUsWUFBWTtZQUN0QixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsb0JBQ2hDLE9BQU8sQ0FDWDtpQkFDRjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQWhCRixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLG9CQUFvQjtnQkFDbEMsT0FBTyxFQUFFLG9CQUFvQjthQUM5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HWF9NT01FTlRfT1BUSU9OUywgTmd4TW9tZW50T3B0aW9ucyB9IGZyb20gJy4vbW9tZW50LW9wdGlvbnMnO1xyXG5cclxuaW1wb3J0IHsgQWRkUGlwZSB9IGZyb20gJy4vYWRkLnBpcGUnO1xyXG5pbXBvcnQgeyBDYWxlbmRhclBpcGUgfSBmcm9tICcuL2NhbGVuZGFyLnBpcGUnO1xyXG5pbXBvcnQgeyBEYXRlRm9ybWF0UGlwZSB9IGZyb20gJy4vZGF0ZS1mb3JtYXQucGlwZSc7XHJcbmltcG9ydCB7IERpZmZlcmVuY2VQaXBlIH0gZnJvbSAnLi9kaWZmZXJlbmNlLnBpcGUnO1xyXG5pbXBvcnQgeyBEdXJhdGlvblBpcGUgfSBmcm9tICcuL2R1cmF0aW9uLnBpcGUnO1xyXG5pbXBvcnQgeyBGcm9tVW5peFBpcGUgfSBmcm9tICcuL2Zyb20tdW5peC5waXBlJztcclxuaW1wb3J0IHsgRnJvbVV0Y1BpcGUgfSBmcm9tICcuL2Zyb20tdXRjLnBpcGUnO1xyXG5pbXBvcnQgeyBJc0FmdGVyUGlwZSB9IGZyb20gJy4vaXMtYWZ0ZXIucGlwZSc7XHJcbmltcG9ydCB7IElzQmVmb3JlUGlwZSB9IGZyb20gJy4vaXMtYmVmb3JlLnBpcGUnO1xyXG5pbXBvcnQgeyBMb2NhbFRpbWVQaXBlIH0gZnJvbSAnLi9sb2NhbC5waXBlJztcclxuaW1wb3J0IHsgTG9jYWxlUGlwZSB9IGZyb20gJy4vbG9jYWxlLnBpcGUnO1xyXG5pbXBvcnQgeyBQYXJzZVBpcGUgfSBmcm9tICcuL3BhcnNlLnBpcGUnO1xyXG5pbXBvcnQgeyBQYXJzZVpvbmVQaXBlIH0gZnJvbSAnLi9wYXJzZS16b25lLnBpcGUnO1xyXG5pbXBvcnQgeyBTdWJ0cmFjdFBpcGUgfSBmcm9tICcuL3N1YnRyYWN0LnBpcGUnO1xyXG5pbXBvcnQgeyBUaW1lQWdvUGlwZSB9IGZyb20gJy4vdGltZS1hZ28ucGlwZSc7XHJcbmltcG9ydCB7IFV0Y1BpcGUgfSBmcm9tICcuL3V0Yy5waXBlJztcclxuXHJcbmNvbnN0IEFOR1VMQVJfTU9NRU5UX1BJUEVTID0gW1xyXG4gIEFkZFBpcGUsXHJcbiAgQ2FsZW5kYXJQaXBlLFxyXG4gIERhdGVGb3JtYXRQaXBlLFxyXG4gIERpZmZlcmVuY2VQaXBlLFxyXG4gIER1cmF0aW9uUGlwZSxcclxuICBGcm9tVW5peFBpcGUsXHJcbiAgUGFyc2VQaXBlLFxyXG4gIFN1YnRyYWN0UGlwZSxcclxuICBUaW1lQWdvUGlwZSxcclxuICBVdGNQaXBlLFxyXG4gIEZyb21VdGNQaXBlLFxyXG4gIExvY2FsVGltZVBpcGUsXHJcbiAgTG9jYWxlUGlwZSxcclxuICBQYXJzZVpvbmVQaXBlLFxyXG4gIElzQmVmb3JlUGlwZSxcclxuICBJc0FmdGVyUGlwZVxyXG5dO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IEFOR1VMQVJfTU9NRU5UX1BJUEVTLFxyXG4gIGV4cG9ydHM6IEFOR1VMQVJfTU9NRU5UX1BJUEVTXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNb21lbnRNb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM/OiBOZ3hNb21lbnRPcHRpb25zKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogTW9tZW50TW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBOR1hfTU9NRU5UX09QVElPTlMsIHVzZVZhbHVlOiB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==