/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as moment from 'moment';
import { Inject, Optional, Pipe } from '@angular/core';
import { NGX_MOMENT_OPTIONS } from './moment-options';
var DurationPipe = /** @class */ (function () {
    function DurationPipe(momentOptions) {
        this.allowedUnits = ['ss', 's', 'm', 'h', 'd', 'M'];
        this._applyOptions(momentOptions);
    }
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    DurationPipe.prototype.transform = /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (typeof args === 'undefined' || args.length !== 1) {
            throw new Error('DurationPipe: missing required time unit argument');
        }
        return moment.duration(value, (/** @type {?} */ (args[0]))).humanize();
    };
    /**
     * @param {?} momentOptions
     * @return {?}
     */
    DurationPipe.prototype._applyOptions = /**
     * @param {?} momentOptions
     * @return {?}
     */
    function (momentOptions) {
        var _this = this;
        if (!momentOptions) {
            return;
        }
        if (!!momentOptions.relativeTimeThresholdOptions) {
            /** @type {?} */
            var units = Object.keys(momentOptions.relativeTimeThresholdOptions);
            /** @type {?} */
            var filteredUnits = units.filter(function (unit) { return _this.allowedUnits.indexOf(unit) !== -1; });
            filteredUnits.forEach(function (unit) {
                moment.relativeTimeThreshold(unit, momentOptions.relativeTimeThresholdOptions[unit]);
            });
        }
    };
    DurationPipe.decorators = [
        { type: Pipe, args: [{ name: 'amDuration' },] }
    ];
    /** @nocollapse */
    DurationPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_MOMENT_OPTIONS,] }] }
    ]; };
    return DurationPipe;
}());
export { DurationPipe };
if (false) {
    /** @type {?} */
    DurationPipe.prototype.allowedUnits;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVyYXRpb24ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tb21lbnQvIiwic291cmNlcyI6WyJkdXJhdGlvbi5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUVqQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxrQkFBa0IsRUFBb0IsTUFBTSxrQkFBa0IsQ0FBQztBQUV4RTtJQUtFLHNCQUFvRCxhQUFnQztRQUZwRixpQkFBWSxHQUFrQixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFHNUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7Ozs7SUFFRCxnQ0FBUzs7Ozs7SUFBVCxVQUFVLEtBQVU7UUFBRSxjQUFpQjthQUFqQixVQUFpQixFQUFqQixxQkFBaUIsRUFBakIsSUFBaUI7WUFBakIsNkJBQWlCOztRQUNyQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFdBQVcsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwRCxNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7U0FDdEU7UUFDRCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLG1CQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBeUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdGLENBQUM7Ozs7O0lBRU8sb0NBQWE7Ozs7SUFBckIsVUFBc0IsYUFBK0I7UUFBckQsaUJBWUM7UUFYQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsRUFBRTs7Z0JBQzFDLEtBQUssR0FBa0IsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsNEJBQTRCLENBQUM7O2dCQUM5RSxhQUFhLEdBQWtCLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQztZQUNqRyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtnQkFDeEIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsNEJBQTRCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN2RixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7Z0JBNUJGLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7Ozs7Z0RBS2IsUUFBUSxZQUFJLE1BQU0sU0FBQyxrQkFBa0I7O0lBeUJwRCxtQkFBQztDQUFBLEFBOUJELElBOEJDO1NBN0JZLFlBQVk7OztJQUV2QixvQ0FBOEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbmltcG9ydCB7IEluamVjdCwgT3B0aW9uYWwsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkdYX01PTUVOVF9PUFRJT05TLCBOZ3hNb21lbnRPcHRpb25zIH0gZnJvbSAnLi9tb21lbnQtb3B0aW9ucyc7XHJcblxyXG5AUGlwZSh7IG5hbWU6ICdhbUR1cmF0aW9uJyB9KVxyXG5leHBvcnQgY2xhc3MgRHVyYXRpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gIGFsbG93ZWRVbml0czogQXJyYXk8c3RyaW5nPiA9IFsnc3MnLCAncycsICdtJywgJ2gnLCAnZCcsICdNJ107XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdYX01PTUVOVF9PUFRJT05TKSBtb21lbnRPcHRpb25zPzogTmd4TW9tZW50T3B0aW9ucykge1xyXG4gICAgdGhpcy5fYXBwbHlPcHRpb25zKG1vbWVudE9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIC4uLmFyZ3M6IHN0cmluZ1tdKTogc3RyaW5nIHtcclxuICAgIGlmICh0eXBlb2YgYXJncyA9PT0gJ3VuZGVmaW5lZCcgfHwgYXJncy5sZW5ndGggIT09IDEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEdXJhdGlvblBpcGU6IG1pc3NpbmcgcmVxdWlyZWQgdGltZSB1bml0IGFyZ3VtZW50Jyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbW9tZW50LmR1cmF0aW9uKHZhbHVlLCBhcmdzWzBdIGFzIG1vbWVudC51bml0T2ZUaW1lLkR1cmF0aW9uQ29uc3RydWN0b3IpLmh1bWFuaXplKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9hcHBseU9wdGlvbnMobW9tZW50T3B0aW9uczogTmd4TW9tZW50T3B0aW9ucyk6IHZvaWQge1xyXG4gICAgaWYgKCFtb21lbnRPcHRpb25zKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoISFtb21lbnRPcHRpb25zLnJlbGF0aXZlVGltZVRocmVzaG9sZE9wdGlvbnMpIHtcclxuICAgICAgY29uc3QgdW5pdHM6IEFycmF5PHN0cmluZz4gPSBPYmplY3Qua2V5cyhtb21lbnRPcHRpb25zLnJlbGF0aXZlVGltZVRocmVzaG9sZE9wdGlvbnMpO1xyXG4gICAgICBjb25zdCBmaWx0ZXJlZFVuaXRzOiBBcnJheTxzdHJpbmc+ID0gdW5pdHMuZmlsdGVyKHVuaXQgPT4gdGhpcy5hbGxvd2VkVW5pdHMuaW5kZXhPZih1bml0KSAhPT0gLTEpO1xyXG4gICAgICBmaWx0ZXJlZFVuaXRzLmZvckVhY2godW5pdCA9PiB7XHJcbiAgICAgICAgbW9tZW50LnJlbGF0aXZlVGltZVRocmVzaG9sZCh1bml0LCBtb21lbnRPcHRpb25zLnJlbGF0aXZlVGltZVRocmVzaG9sZE9wdGlvbnNbdW5pdF0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==